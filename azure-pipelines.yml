# 'Allow scripts to access the OAuth token' was selected in pipeline.  Add the following YAML to any steps requiring access:
#       env:
#           MY_ACCESS_TOKEN: $(System.AccessToken)
# Variable 'additionalParams' was defined in the Variables tab
# Variable 'capabilities' was defined in the Variables tab
# Variable 'command' was defined in the Variables tab
# Variable 'tags' was defined in the Variables tab
# Variable 'target' was defined in the Variables tab
resources:
  repositories:
  - repository: self
    type: git
    ref: refs/heads/main
jobs:
- job: Phase_1
  displayName: Agent job 1
  timeoutInMinutes: 6120
  cancelTimeoutInMinutes: 1
  pool:
    name: Azure Pipelines
  steps:
  - checkout: self
    fetchDepth: 1
    lfs: true
    persistCredentials: True
  - task: PowerShell@2
    displayName: Set Build Name
    inputs:
      targetType: inline
      script: "$atlessTags = \"$(tags)\" -replace \"@\", \"\" \n$atlessTags = $atlessTags -replace \"~\", \"not\"\n$cleanTarget =  \"$(target)\" -replace \"http://\", \"\" -replace \"https://\", \"\" -replace \"/\",\"-\"\n$T = \"$cleanTarget $atlessTags\"\nif ($T.length -gt 100)\n{\n$T=$T.Substring(0,100)\n}\nwrite-host \"##vso[build.updatebuildnumber]$T\""

  - task: PowerShell@2
    displayName: Run Tests
    inputs:
      targetType: inline
      script: >-
        write-host "target: $(target)"

        if (-not ("$(target)" -match "^http.*")){

        write-host "adding http://"

        $targ = "http://$(target)"

        } else {

        $targ = "$(target)"

        }

        $tg = "$(tags)".Trim()

        if ($tg)

        {

        $tg = "--cucumberOpts.tags=`"$tg`""

        }

        write-host "setting tags $tg"

        write-host "baseUrl: $(target)"

        npm run $(command) -- $tg  --params.capabilities.select=$(capabilities) $(additionalParams) --params.baseUrl=$targ
      workingDirectory: $(Build.Repository.LocalPath)
  - task: PowerShell@2
    displayName: Publish Test Results
    condition: always()
    inputs:
      targetType: inline
      script: >-
        Start-Sleep -s 45

        $thePath = "$env:Build_Repository_LocalPath/Results/"

        Get-ChildItem $thePath -Filter *.junit | Foreach-Object {

        write-host "##vso[results.publish type=JUnit;mergeResults=false;publishRunAttachments=true;resultFiles=$thePath$_]"

        }
      workingDirectory: $(Build.Repository.LocalPath)
  - task: PublishPipelineArtifact@1
    displayName: Publish Results folder
    condition: always()
    inputs:
      path: $(Build.Repository.LocalPath)/Results
      artifactName: $(Build.DefinitionName)$(Agent.Name)
...
